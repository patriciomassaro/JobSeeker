name: Build and Push to ECR

on:
  push:
    branches: 
      - dev

env: 
  POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{secrets.AWS_REGION}}
  FIRST_SUPERUSER: ${{secrets.FIRST_SUPERUSER}}
  FIRST_SUPERUSER_NAME: ${{secrets.FIRST_SUPERUSER_NAME}}
  FIRST_SUPERUSER_PASSWORD: ${{secrets.FIRST_SUPERUSER_PASSWORD}}
  PROJECT_NAME: ${{secrets.PROJECT_NAME}}
  ECR_REPOSITORY_MQ: ${{secrets.ECR_REPOSITORY_MQ}}
  ECR_REPOSITORY_BACKEND: ${{secrets.ECR_REPOSITORY_BACKEND}}
  ECR_REPOSITORY_FRONTEND: ${{secrets.ECR_REPOSITORY_FRONTEND}}
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_PORT: 5672
  CUSTOM_SERVICES: "backend frontend"
  EXTERNAL_SERVICES: "rabbitmq"
  ENVIRONMENT: "dev"

jobs:
  build-and-push:
    runs-on: self-hosted  
    environment: DEV
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}} 
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get ECR registry URL
      id: get-ecr-registry
      run: echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

    - name: Install docker-compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Create ECR repositories if they don't exist
      run: |
        for service in $CUSTOM_SERVICES $EXTERNAL_SERVICES; do
          repo_name="${ENVIRONMENT}-${PROJECT_NAME}-${service}"
          echo $repo_name
          aws ecr describe-repositories --repository-names "${repo_name}" || aws ecr create-repository --repository-name "${repo_name}"
        done

    - name: Build, tag, and push images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.get-ecr-registry.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        for service in $EXTERNAL_SERVICES; do
          repo_name="${ENVIRONMENT}-${PROJECT_NAME}-${service}"
          echo $repo_name
          image=$(docker-compose config | grep "image: " | grep $service | awk '{print $2}')
          docker pull $image
          docker tag $image "$ECR_REGISTRY/${repo_name}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${repo_name}:$IMAGE_TAG"
        done
        
        for service in $CUSTOM_SERVICES; do
          repo_name="${ENVIRONMENT}-${PROJECT_NAME}-${service}"
          echo $repo_name
          docker-compose build $service
          docker tag "${service}:latest" "$ECR_REGISTRY/${repo_name}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${repo_name}:$IMAGE_TAG"
        done

    - name: Cleanup
      if: always()
      run: |
        docker-compose down
        docker system prune -af
