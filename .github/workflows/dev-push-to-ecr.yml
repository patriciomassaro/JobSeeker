name: Build, Push to ECR, and Deploy Backend to Lambda

on:
  push:
    branches: 
      - dev

env: 
  POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{secrets.AWS_REGION}}
  FIRST_SUPERUSER: ${{secrets.FIRST_SUPERUSER}}
  FIRST_SUPERUSER_NAME: ${{secrets.FIRST_SUPERUSER_NAME}}
  FIRST_SUPERUSER_PASSWORD: ${{secrets.FIRST_SUPERUSER_PASSWORD}}
  PROJECT_NAME: ${{secrets.PROJECT_NAME}}
  ECR_REPOSITORY_BACKEND: ${{secrets.ECR_REPOSITORY_BACKEND}}
  ENVIRONMENT: "dev"

jobs:
  build-and-deploy-backend:
    runs-on: self-hosted  
    environment: DEV
    steps:
    - name: Install Docker and Docker Compose
      run: |
        sudo dnf update -y
        sudo dnf install docker -y
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        sudo chmod +x /usr/local/bin/docker-compose
        docker --version
        docker-compose --version

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}} 
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        repo_name="${ENVIRONMENT}-${PROJECT_NAME}-backend"
        aws ecr describe-repositories --repository-names "${repo_name}" || aws ecr create-repository --repository-name "${repo_name}"
        # Build and push the backend image
        docker-compose build backend
        docker tag ${PROJECT_NAME}-backend:latest $ECR_REGISTRY/${repo_name}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${repo_name}:$IMAGE_TAG

    - name: Deploy backend to AWS Lambda
      run: |
        aws lambda update-function-code \
          --function-name "${ENVIRONMENT}-${PROJECT_NAME}-backend" \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${ENVIRONMENT}-${PROJECT_NAME}-backend:${{ github.sha }}

    - name: Cleanup
      if: always()
      run: |
        docker-compose down
        docker system prune -af
