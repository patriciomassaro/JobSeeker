name: Apply DB Migrations to GCP

on:
  push:
    branches:
      - dev
  

env:
  DB_INSTANCE: ${{vars.DB_INSTANCE}}
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_PORT: ${{ vars.DB_PORT }}
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  FIRST_SUPERUSER: ${{ vars.FIRST_SUPERUSER}}
  FIRST_SUPERUSER_NAME: ${{vars.FIRST_SUPERUSER_NAME}}
  FIRST_SUPERUSER_PASSWORD: ${{secrets.FIRST_SUPERUSER_PASSWORD}}
  PROJECT_NAME: ${{vars.PROJECT_NAME}} 

jobs:
  apply-migrations:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install alembic sqlalchemy psycopg2-binary sqlmodel psycopg python-jose passlib pydantic-settings

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SQL Proxy
      run: |
        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
        chmod +x cloud_sql_proxy
        ./cloud_sql_proxy -instances=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:${{ env.DB_INSTANCE }}=tcp:5432 &
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Debug Information  
      env:
        PGPASSWORD: ${{ env.DB_PASSWORD }}
      run: |
        echo "DB_INSTANCE: $DB_INSTANCE"
        echo "DB_NAME: $DB_NAME"
        echo "DB_USER: $DB_USER"
        echo "DB_PORT: $DB_PORT"
        echo "Cloud SQL Proxy status:"
        ps aux | grep cloud_sql_proxy
        echo "Attempting to connect to database:"
        psql -h 127.0.0.1 -U $DB_USER -p $DB_PORT -c "SELECT 1;"


    - name: Create Database if not exists
      env:
        PGPASSWORD: ${{ env.DB_PASSWORD }}
      run: |
        if psql -h 127.0.0.1 -U $DB_USER -p $DB_PORT -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
          echo "Database $DB_NAME already exists"
        else
          psql -h 127.0.0.1 -U $DB_USER -p $DB_PORT -c "CREATE DATABASE $DB_NAME"
          echo "Database $DB_NAME created successfully"
        fi

    - name: Check Alembic environment Python version
      run: |
        cd backend
        python -c "import sys; print(sys.version)"
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        export DB_INSTANCE=127.0.0.1  # This is because Cloud SQL Proxy is listening on localhost
        python -m alembic current

    - name: Run Alembic migrations
      run: |
        cd backend
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -R
        echo "PYTHONPATH:"
        echo $PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        export DB_INSTANCE=127.0.0.1  # This is because Cloud SQL Proxy is listening on localhost

        python -m alembic upgrade head

    - name: Verify migration
      env:
        PGPASSWORD: ${{ env.DB_PASSWORD }}
      run: |
        psql -h 127.0.0.1 -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }} -p $DB_PORT -c "SELECT version_num FROM alembic_version;"

    - name: Insert initial data
      run: |
        cd backend
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        python -c "from app.initial_data import main; main()"
